  --------------CONVENTIONS---------------------

    TODO: ORDER MODEL


    Toda clase que queremos activar ==> "#nombreClase-active";
    Todas las vistas mobileFirst
    Medidas del VP ==>  || >1024px (Desktop) ||  >426px && <1024px (Tablet) || <426px (Mobile) 
    Font-size dependiendo el viewport ==> ...
    Contenedor de contenedores ==> product-cards-section
    Contenedor de elementos particulares que componen un contenedor ==> product-card-container
    MAIN CONTENT TIENE MARGIN-TOP PARA QUE EL HEADER NO TAPE
    MARGINS Y PADDINGS SIEMPRE EN %
    Al ser un login por popup, a TODOS los get hay que preguntar por errores


const fs = require('fs');
const path = require('path')
const db = require('../database/models');
const { S3Client, PutObjectCommand, GetObjectCommand, DeleteObjectCommand } = require('@aws-sdk/client-s3');
const { getSignedUrl } = require("@aws-sdk/s3-request-presigner");

const sharp = require('sharp')

const bucketName = process.env.BUCKET_NAME;
const bucketRegion = process.env.BUCKET_REGION;
const accessKey = process.env.ACCESS_KEY;
const secretAccessKey = process.env.SECRET_ACCESS_KEY;
// Creo el objeto
const s3 = new S3Client({
    credentials: {
        accessKeyId: accessKey,
        secretAccessKey: secretAccessKey
    },
    region: bucketRegion
});
router.get('/saddfdfgrtewrdcsadxqa', async (req, res) => {
    // Cargo las fotos que estan cargadas en la carpeta borrar
    // Especifica la ruta de la imagen relativa a la carpeta p√∫blica
    const folderPath = path.join(__dirname, '../../public/img/borrar');
    let imagesFileNames = ['1.jpg', '2.jpg', '3.jpg', '4.jpg', '5.jpg', '6.jpg','7.jpg', '8.jpg', '9.jpg', '10.jpg', '11.jpg', '12.jpg', '13.jpg'];
    let filesToAddDb = [];
    for (let i = 0; i < imagesFileNames.length; i++) {
        const filename = imagesFileNames[i];
        // Lee el contenido de la imagen
        fs.readFile(`${folderPath}/${filename}`, async (err, data) => {
            if (err) {
                // Si ocurre un error al leer la imagen, responde con un mensaje de error
                return res.status(500).send('Error al leer la imagen.');
            }
            // En el data tengo el buffer
            let fileType = 1;
            let randomName, buffer;

            // Creo el nombre unico para la foto (dentro del forEach)
            randomName = "galletyPhoto-" + Math.random().toString(36).substring(2, 2 + 10) + '.webp';
            // Cambio el formato a webp y redimensiono la imagen, total la de los productos 
            //  no se necesita tan gde      .resize({ height: 1920, width: 1080, fit: 'contain', background: { r: 255, g: 255, b: 255, alpha: 1 } })
            buffer = await sharp(data).toFormat('webp').toBuffer();


            // El objeto de la imagen que voy a subir
            const params = {
                Bucket: bucketName,
                Key: `product/galleryPhoto/${randomName}`,//Esto hace que se guarde en la carpeta product
                Body: buffer,
                ContentType: 'image/webp'
            };
            const command = new PutObjectCommand(params);
            await s3.send(command);
            // Armo el objeto para la db
            filesToAddDb.push({
                filename: randomName,
                file_types_id: fileType,
                home_sections_id: 5,
            });
        });
    };
    await db.HomeFile.bulkCreate(filesToAddDb);
    return res.send('Imagenes subidas')

})

